# This is an **example** API to demontstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - http # Remove if your API doesn't support HTTP
  - https # Remove if your API donsn't support HTTPS
host: api.solarcoin.org:8080 # Replace with your hostname. You can also specify port e.g. example.com:777
basePath: / # Replace with your basePath. Note: SHOULD begin with '/'.
info:
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    This is the Claiming API for the Solarcoin Foundation
    # Introduction
    This section will be expanded at a later time.
    

  version: '1.0.0' # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI require version to be string, but without quotation YAML can recognize it as number.

  title: Solarcoin Integration # Replace with your API title
  # Keep it simple. Don't add "API" or verison at the end of the string.

  termsOfService: 'https://solarcoin.org/' # [Optional] Replace with an URL to your ToS
  contact:
    url: 'https://solarcoin.org/contact' # [Optional] Replace with link to your contact form
  x-logo:
    url: 'https://solarcoin.org/sites/default/files/slr-logo.png'
produces:
  # List of mime types your API endpoins can return.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not used in your API
  - application/json
  # you can add any mime type your API produces to the list
consumes:
  # List of mime types your API endpoins consumes.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not supported by your API
  - application/json
  # you can add any mime type your API consumes to the list

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Claim
    description: Operations that submit claims
  - name: Uuid
    description: Operations concerning uuids
  - name: Devices
    description: Operations concerning Devices
  - name: Integrations
    description: Operations that handle integrations
  - name: Projects
    description: Operations that process projects
# Security scheme definitions that can be used across the specification.
securityDefinitions:
  basicAuth: # security definition name (you can name it as you want)
    type: basic

security:
  - basicAuth: []

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/claim/':
    post:
      tags:
        - Claim
      
      summary: submit a claim
      
      #description: bla bla bla
      
      operationId: submitClaim
      
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RegistrationRequest'
      responses:
        '200':
          description: OK
          headers: {}
          schema: 
            $ref: '#/definitions/RegistrationResponse'
    
  '/claim/batch/':
    post:
      tags:
        - Claim
      
      summary: submit a bath of claims
      
      #description: bla bla bla
      
      operationId: submitClaimsBatch
      
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/RegistrationRequest'
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            type: array
            items:
              $ref: '#/definitions/RegistrationResponse'
  
  '/claim/actual/':
    post:
      tags:
        - Claim
      
      summary: submit a real-time claim
      
      #description: bla bla bla
      
      operationId: submitActualClaim
      
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ActualClaim'
      responses:
        '200':
          description: OK
          headers: {}
  
  '/claim/actual/batch/':
    post:
      tags:
        - Claim
      
      summary: submit a batch of real-time claims
      
      #description: bla bla bla
      
      operationId: submitActualClaimsBatch
      
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/ActualClaim'
      responses:
        '200':
          description: OK
          headers: {}
            
  '/uuid/':
    get:
      tags:
        - Uuid
      
      summary: generates a new UUID
      
      #description: bla bla bla
      
      operationId: getUuid
      
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            $ref: '#/definitions/UUIDResponse'
            
  '/uuid/batch/':
    get:
      tags:
        - Uuid
      
      summary: generate a batch of UUIDs
      
      #description: bla bla bla
      
      operationId: getUuidBatch
      
      parameters:
        - name: batchSize
          in: query
          type: integer
          default: 10
            
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            $ref: '#/definitions/UUIDBatchResponse'
            
  '/devices/{integration}/':
    post:
      tags:
        - Devices
      
      summary: submit real-time claims for an integration
      
      #description: bla bla bla
      
      operationId: postDevice
      
      parameters:
        - name: integration
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ActualClaim'
      responses:
        '200':
          description: OK
          headers: {}
        '400':
          description: bad request
          headers: {}
          schema:
            type: array
            items: 
              type: string
  
  '/devices/{integration}/{deviceID}':
    get:
      tags:
        - Devices
      
      summary: get total claims of an integration for the last period
      
      #description: bla bla bla
      
      operationId: getDevice
      
      parameters:
        - name: integration
          in: path
          required: true
          type: string
        - name: deviceID
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            $ref: '#/definitions/ActualClaimsResponse'
            
  '/devices/smappee/{integration}/{period}':
    get:
      tags:
        - Devices
      
      summary: get total claims for the given period
      
      #description: bla bla bla
      
      operationId: getSmappeeInfo
      
      parameters:
        - name: integration
          in: path
          required: true
          type: string
        - name: period
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            $ref: '#/definitions/ActualClaimsResponse'
            
  '/integrations/':
    post:
      tags:
        - Integrations
      
      summary: add an integration
      
      #description: bla bla bla
      
      operationId: postIntegrations
      
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/IntegrationRequest'
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            $ref: '#/definitions/Affiliate'
        '404':
          description: not found
          headers: {}
        '400':
          description: bad request
          headers: {}
          
    put:
      tags:
        - Integrations
      
      summary: update an integration
      
      #description: bla bla bla
      
      operationId: putIntegrations
      
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/IntegrationRequest'
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            $ref: '#/definitions/Affiliate'
        '404':
          description: not found
          headers: {}
        '400':
          description: bad request
          headers: {}
            
  '/projects/update/':
    post:
      tags:
        - Projects
      
      summary: update a project
      
      #description: bla bla bla
      
      operationId: updateProjects
      
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            $ref: '#/definitions/Project'
        '404':
          description: not found
          headers: {}
        '400':
          description: bad request
          headers: {}
            
  '/projects/{projectID}/deactivate':
    post:
      tags:
        - Projects
      
      summary: deactive a project
      
      #description: bla bla bla
      
      operationId: deactiveProject
      
      parameters:
        - name: projectID
          in: path
          description: The name that needs to be updated
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: OK
          headers: {}
          schema:
            $ref: '#/definitions/Project'
        '404':
          description: not found
          headers: {}
        '400':
          description: bad request
          headers: {}
            

# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:
  RegistrationRequest:
    description: A claim to be registered
    type: object
    properties:
      firstName:
        description: User first name
        type: string
      lastName:
        description: User last name
        type: string
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
      bounty:
        $ref: '#/definitions/Affiliate'
  RegistrationResponse:
    description: A response to a registered claim
    type: object
    properties:
      id:
        type: string
      affiliate:
        type: string
      claimant:
        $ref: '#/definitions/RegistrationRequest'
  Affiliate:
    description: An affiliate
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      address:
        type: string
      city:
        type: string
      state:
        type: string
      country:
        type: string
      zipCode:
        type: string
      info:
        type: string
      codename:
        type: string
      description:
        type: string
      webHook:
        type: string
  Project:
    description: A project
    type: object
    properties:
      address: 
        type: string
      city: 
        type: string
      state: 
        type: string
      zipCode: 
        type: string
      country:
        type: string
      nameplate:
        type: number
      installDate:
        type: string
      walletAddress:
        type: string
      documentation: 
        type: string
      deviceID: 
        type: string
      legalOwner: 
        type: string
      claimantRelationship: 
        type: string
      ofacCompliant:
        type: boolean
  ActualClaim:
    description: Real-time claim
    type: object
    properties:
      logTime:
        type: integer
      kwh:
        type: number
      deviceId:
        type: string
  UUIDResponse:
    description: affiliate's UUID info
    type: object
    properties:
      UUID:
        type: string
  UUIDBatchResponse:
    description: list of of affiliate's UUID info
    type: object
    properties:
      batch:
        type: array
        items:
          type: string
  ActualClaimsResponse:
    description: total coins info
    type: object
    properties:
      totalCoins:
        type: number
  IntegrationRequest:
    type: object
    properties:
      integration:
        type: string
      webhook:
        type: string